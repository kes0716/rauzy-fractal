import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import copy

def find_projections(A: np.array) -> list:
  n = A.shape[0]
  e = np.eye(n, dtype = np.float64)

  def gram_schmidt(*V) -> list:
    q = []
    for i in range(n):
      q.append(copy.deepcopy(V[i]))
      for j in range(i):
        q[i] -= np.dot(V[i], q[j]) * q[j]
      q[i] /= np.linalg.norm(q[i])
    return q
  
  eigvals, eigvecs = np.linalg.eig(A)
  normal = None
  for i in range(n):
    if np.imag(eigvals[i]) == 0 and np.real(eigvals[i]) > 1:
      if normal is not None:
        raise ValueError("Not a Pisot substitution")
      normal = eigvecs[:, i]
  if normal is None:
    raise ValueError("Not a Pisot substitution")
  if not np.all(np.isreal(normal)):
    raise RuntimeError("Numerical instability led to a complex eigenvector")
  normal = np.abs(normal)
  basis = gram_schmidt(normal, *e[:n-1])[1:]
  return [np.array([basis[j][i] for j in range(n-1)]) for i in range(n)]

def pisot(sub: list, n: int, dot_size = 6, label = False):
  '''
  This function draws the fractal generated by proper prefixes of the nth word.
  The points having length greater than or equal to the (3k+1)st word and less than (3k+3)rd word will be in the same color for k=0,1,2,...
  (This is precisely the kth A-layer when the fractal is two-dimensional)
  The length of "sub" must be equal to the number of letters, and sub[i] must be the substitution for letter i.
  If "label" is set to True, there will be a number showing the length of prefix to which each dot corresponds.
  "dot_size" is the size of the dot used in plotting the fractal.
  '''
  d = len(sub)
  A = [[0]*d for _ in range(d)]
  for i in range(d):
    for j in sub[i]:
      A[j][i] += 1
  proj = find_projections(np.array(A))
  a = [0]
  l = [1]
  for i in range(n):
    b = []
    for v in a:
      b.extend(sub[v])
    a = b
    l.append(len(a))
  l.append(0) #to make l[-1] = 0

  cur = np.zeros(d-1, dtype = np.float64)
  points = [cur.copy()]
  for v in a:
    cur += proj[v]
    points.append(cur.copy())
  
  fig = plt.figure(figsize=(12, 9)) #Figure size can be adjusted if necessary
  colors = ['b','g','r','c','m','y']
  num_colors = len(colors)

  if d == 3:
    if label:
      k = 0
      for i in range(len(points) - 1):
        plt.plot(*points[i], f"{colors[(k+2)//3%num_colors]}o", markersize = dot_size)
        plt.annotate(str(i), points[i])
        if i == l[k] - 1:
          k += 1
    else:
      for k in range(n+1):
        plt.plot(np.array([points[i][0] for i in range(l[k-1], l[k])]),
                np.array([points[i][1] for i in range(l[k-1], l[k])]),
                f"{colors[(k+2)//3%num_colors]}o", markersize = dot_size)
  elif d == 4:
    ax = fig.add_subplot(111, projection='3d')
    if label:
      k = 0
      for i in range(len(points) - 1):
        ax.plot(*points[i], f"{colors[(k+2)//3%num_colors]}o", markersize = dot_size)
        ax.text(*points[i], str(i))
        if i == l[k] - 1:
          k += 1
    else:
      for k in range(n+1):
        ax.plot(np.array([points[i][0] for i in range(l[k-1], l[k])]),
                np.array([points[i][1] for i in range(l[k-1], l[k])]),
                np.array([points[i][2] for i in range(l[k-1], l[k])]),
                f"{colors[(k+2)//3%num_colors]}o", markersize = dot_size)
  
  else:
    pass  #Further methods (e.g. dimension compression via PCA) must be used, if visualizing 4 or more dimensions is necessary.

  plt.show()

pisot([[0,1],[0,2],[0]], 15, 1.2)  #Rauzy fractal, up to 5th A-layer (proper prefixes of 15th word)
pisot([[0,1],[0,2],[0,3],[0]], 6, 6, True)  #3D Rauzy fractal, proper prefixes of 6th word
pisot([[0,1],[0,2],[0,3],[0]], 12, 1.2) #3D Rauzy fractal, proper prefixes of 12th word
